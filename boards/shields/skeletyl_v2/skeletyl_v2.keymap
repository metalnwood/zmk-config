#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// The default keymap is roughly on Miryoku layout
// (https://github.com/manna-harbour/miryoku).
// Customize on your own on the config folder.

#define DEFAULT    0
#define SYM     1
#define SEC_SYM     2
#define NUMPAD     3
#define EMAC     4
#define FUN     5
#define NAV     6
#define WM     7
#define MEDIA     8

/ {
  macros {
        m_smile: m_smile {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    	    wait-ms = <20>;
	    tap-ms = <20>;
            bindings
                = < &kp COLON  &kp RPAR>;
        };
        m_email: m_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    	    wait-ms = <20>;
	    tap-ms = <20>;
            bindings
	      = < &kp M &kp E  &kp T  &kp A &kp L &kp N  &kp W  &kp O  &kp O  &kp D  &kp AT  &kp G &kp M &kp A &kp I  &kp L  &kp DOT &kp C &kp O &kp M>;
        };
        m_joy: m_joy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    	    wait-ms = <20>;
	    tap-ms = <20>;
            bindings
                = < &kp COLON &kp J &kp O &kp Y &kp COLON >;
        };
       m_cd: m_cd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <20>;
	    tap-ms = <20>;
            bindings
                = < &kp C &kp D &kp SPACE>;
        };

    };

  combos {
        compatible = "zmk,combos";
	  

        TAB_COMBO {
	  timeout-ms = <40>;
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0>;
        };
	RBRC_COMBO {
	  timeout-ms = <40>;
            bindings = <&kp RBRC>;
            key-positions = <27 28>;
            layers = <1>;
        };
	LBRC_COMBO {
	  timeout-ms = <40>;
            bindings = <&kp LBRC>;
            key-positions = <26 27>;
            layers = <1>;
        };
	
        CAPS_WORD_COMBO {
	  	  timeout-ms = <40>;
            bindings = <&caps_word>;
            key-positions = <27 28>;
            layers = <0>;
        };

        RETURN_COMBO  {
	  	  timeout-ms = <40>;
            bindings = <&kp ENTER>;
            key-positions = <26 27>;
            layers = <0>;
        };

        BACKSPACE_COMBO {
	  	  timeout-ms = <60>;
            bindings = <&kp BSPC>;
            key-positions = <6 7>;
            layers = <0 1 2 3>;
        };
  
    
    };
  
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms =<150 >;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
	      &kp SEMI &kp COMMA  &kp DOT  &kp P   &kp Y                       &kp F  &kp G  &kp C  &kp R  &kp L
    &hm LGUI A  &hm LALT O  &hm LCTRL E &hm LSHFT U &lt NAV I                      &lt FUN D  &hm LSHFT H &hm LCTRL T &hm LALT N      &hm LGUI S
    &kp SQT     &kp  Q  &lt EMAC J &lt SEC_SYM K  &kp X                    &kp B  &lt SEC_SYM M  &kp W   &kp V    &kp Z
                 &lt SYM ESC &lt NUMPAD TAB   &lt MEDIA TAB                    &lt WM ENTER &lt SYM ENTER    &lt SYM SPACE
            >;
        };
        sym {
            bindings = <
    &kp EXCL    &kp AT    &kp HASH    &kp DOLLAR   &kp PERCENT                 &kp CARET &kp AMPS &kp STAR &kp EQUAL &kp MINUS 
    &kp N1   &hm LALT N2    &hm LCTRL N3   &hm LSHFT N4  &kp N5                &kp N6   &hm LSHFT N7    &hm LCTRL N8   &hm LALT N9  &kp N0 
    &kp DQT   &kp BSLH    &kp LBKT      &kp RBKT   &kp DOT                    &kp PLUS   &kp LPAR    &kp RPAR      &kp TILDE   &kp FSLH
                                        &kp SPACE   &kp LT &kp GT           &kp CAPS   &kp ENTER &kp SPACE                                              
            >;
        };

	sec_sym {
            bindings = <
    &m_smile    &kp AT    &kp HASH    &kp PIPE   &kp PERCENT                 &kp PLUS &kp GRAVE &kp STAR &kp EQUAL &kp MINUS 
    &kp N1   &kp N2    &m_email   &kp N4  &kp N5                               &kp N6   &kp FSLH    &kp TILDE   &m_cd  &kp N0 
    &kp DQT   &kp BSLH    &m_joy      &kp RBKT   &kp DOT                    &kp PLUS   &kp LBRC    &kp RBRC      &kp TILDE   &kp FSLH
                                        &kp SPACE   &kp LT &kp GT           &kp CAPS   &kp ENTER &kp SPACE                                              
            >;
        };
	numpad {
            bindings = <
    &kp LBKT    &kp N7  &kp N8  &kp N9  &kp RBKT                        &kp STAR &kp N7  &kp N8  &kp N9  &kp MINUS 
    &kp SEMI    &kp N4  &kp N5  &kp N6  &kp EQUAL                       &kp DOT &kp N7  &kp N8  &kp N9  &kp PLUS
    &kp GRAVE   &kp N1  &kp N2  &kp N3  &kp BSLH                        &kp N0 &kp N7  &kp N8  &kp N9  &kp FSLH
                                &kp DOT &kp N0      &kp MINUS   &kp SPACE   &kp ENTER  &kp SPACE
	      
            >;
        };
	emacs {
            bindings = <
    &kp LBKT    &kp N7  &kp N8  &kp N9  &kp RBKT                        &kp STAR &kp N7  &kp N8  &kp N9  &kp MINUS 
    &kp SEMI    &kp N4  &kp N5  &kp N6  &kp EQUAL                       &kp DOT &kp N7  &kp N8  &kp N9  &kp PLUS
    &kp GRAVE   &kp N1  &kp N2  &kp N3  &kp BSLH                        &kp N0 &kp N7  &kp N8  &kp N9  &kp FSLH
                                &kp DOT &kp N0      &kp MINUS   &kp SPACE   &kp ENTER  &kp SPACE
	      
            >;
        };
        fun {
            bindings = <
     &none &kp F7  &kp F8  &kp F9 &kp F10                                 &none   &none       &none       &none       &none
     &none &kp F4  &kp F5  &kp F6 &kp F11                                  &none   &kp RSHFT   &kp RCTRL   &kp RALT    &kp RGUI
     &none &kp F1  &kp F2  &kp F3 &kp F12                       &none   &none       &none       &none       &none
                            &kp K_APP   &kp SPACE       &kp TAB     &none   &none   &trans
            >;
        };

        nav {
            bindings = <
    &none       &none       &none       &none       &none                           &kp PG_UP    &kp HOME  &kp UP  &kp END &kp BSPC 
    &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &none                           &kp PG_DN    &kp LEFT    &kp DOWN    &kp RIGHT       &kp DEL
    &none       &none       &none       &none       &none                           &kp INS     &kp PG_DN    &kp DOWN    &kp PG_UP   &kp END
                                        &none       &trans  &none       &kp RET     &kp BSPC    &kp DEL     
            >;
        };

	wm {
            bindings = <
	    &none       &none       &none       &none       &none                           &none       &none       &none           &none           &none
	      &kp LG(N1)    &kp LG(N2)     &kp LG(N3)   &kp LG(N4)   &kp LG(N5)     &kp LG(N6)    &kp LG(N7)     &kp LG(N8)   &kp LG(N9)   &kp LG(N0)
	      &kp LG(LS(N1)) &kp LG(LS(N2))  &kp LG(LS(N3)) &kp LG(LS(N4)) &kp LG(LS(N5))  &kp LG(LS(N6)) &kp LG(LS(N7)) &kp LG(LS(N8)) &kp LG(LS(N9)) &kp LG(LS(N0))

	    
                                        &trans      &none   &none       &kp C_STOP  &kp C_PP    &kp C_MUTE     
            >;
        };

        

        media {
            bindings = <
    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2              &none       &none                           &none       &none       &kp C_VOL_UP           &none           &none
    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2    &kp LSHFT   &none                           &none       &kp C_PREV  &kp C_VOL_DN    &kp C_VOL_DN    &kp C_NEXT
    &bt BT_CLR_ALL       &bt BT_CLR       &none       &none       &none                           &none       &none       &kp C_MUTE           &none           &none
                                        &trans      &none   &none       &kp C_STOP  &kp C_PP    &kp C_MUTE     
            >;
        };

    }
	;}
;
